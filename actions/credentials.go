package actions

import (
	"github.com/bfosberry/gamesocialid/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Credential)
// DB Table: Plural (Credentials)
// Resource: Plural (Credentials)
// Path: Plural (/credentials)
// View Template Folder: Plural (/templates/credentials/)

// CredentialsResource is the resource for the credential model
type CredentialsResource struct {
	buffalo.Resource
}

// List gets all Credentials. This function is mapped to the the path
// GET /credentials
func (v CredentialsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	credentials := &models.Credentials{}
	// You can order your list here. Just change
	userID := currentUserID(c)
	err := tx.Where("user_id = ?", userID).All(credentials)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(credentials)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make credentials available inside the html template
	c.Set("credentials", credentials)
	c.Set("owner", true)
	return c.Render(200, r.HTML("credentials/index.html"))
}

// Show gets the data for one Credential. This function is mapped to
// the path GET /credentials/{credential_id}
func (v CredentialsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Credential
	credential := &models.Credential{}
	// To find the Credential the parameter credential_id is used.
	err := tx.Find(credential, c.Param("credential_id"))
	if err != nil {
		return err
	}
	userID := currentUserID(c)
	if credential.UserID != userID {
		return c.Error(404, ErrNotFound)
	}
	// Make credential available inside the html template
	c.Set("credential", credential)
	return c.Render(200, r.HTML("credentials/show.html"))
}

// New renders the formular for creating a new credential.
// This function is mapped to the path GET /credentials/new
func (v CredentialsResource) New(c buffalo.Context) error {
	// Make credential available inside the html template
	c.Set("credential", &models.Credential{})
	return c.Render(200, r.HTML("credentials/new.html"))
}

// Create adds a credential to the DB. This function is mapped to the
// path POST /credentials
func (v CredentialsResource) Create(c buffalo.Context) error {
	// Allocate an empty Credential
	credential := &models.Credential{}
	// Bind credential to the html form elements
	err := c.Bind(credential)
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(credential)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make credential available inside the html template
		c.Set("credential", credential)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("credentials/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Credential was created successfully")
	// and redirect to the credentials index page
	return c.Redirect(302, "/credentials/%s", credential.ID)
}

// Edit renders a edit formular for a credential. This function is
// mapped to the path GET /credentials/{credential_id}/edit
func (v CredentialsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Credential
	credential := &models.Credential{}
	err := tx.Find(credential, c.Param("credential_id"))
	if err != nil {
		return err
	}
	userID := currentUserID(c)
	if credential.UserID != userID {
		return c.Error(404, ErrNotFound)
	}
	// Make credential available inside the html template
	c.Set("credential", credential)
	return c.Render(200, r.HTML("credentials/edit.html"))
}

// Update changes a credential in the DB. This function is mapped to
// the path PUT /credentials/{credential_id}
func (v CredentialsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Credential
	credential := &models.Credential{}
	err := tx.Find(credential, c.Param("credential_id"))
	if err != nil {
		return err
	}
	userID := currentUserID(c)
	if credential.UserID != userID {
		return c.Error(404, ErrNotFound)
	}
	// Bind credential to the html form elements
	err = c.Bind(credential)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(credential)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make credential available inside the html template
		c.Set("credential", credential)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("credentials/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Credential was updated successfully")
	// and redirect to the credentials index page
	return c.Redirect(302, "/credentials/%s", credential.ID)
}

// Destroy deletes a credential from the DB. This function is mapped
// to the path DELETE /credentials/{credential_id}
func (v CredentialsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Credential
	credential := &models.Credential{}
	// To find the Credential the parameter credential_id is used.
	err := tx.Find(credential, c.Param("credential_id"))
	if err != nil {
		return err
	}
	userID := currentUserID(c)
	if credential.UserID != userID {
		return c.Error(404, ErrNotFound)
	}
	err = tx.Destroy(credential)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Credential was destroyed successfully")
	// Redirect to the credentials index page
	return c.Redirect(302, "/credentials")
}
